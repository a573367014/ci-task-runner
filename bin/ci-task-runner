#!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const program = require('commander');

const taskRunner = require('../');
const PACKAGE = require('../package.json');
const CONFIG_PATH_NAME = `.${PACKAGE.name}.json`;
let CONTEXT = process.cwd();

process.env.LOGER_DISPLAY_COLOR = 1;

program
    .version(require('../package.json').version)
    .usage('[options]')
    .option('--parallel [number]', 'the maximum number of concurrent processes', parseInt)
    .option('--force', 'forces all tasks to run')
    .option('--config [path]', 'the configuration file path')
    .option('--init', 'initialize the project')
    .parse(process.argv);

function config(file) {
    let options = {
        parallel: program.parallel,
        force: program.force
    };

    if (file) {
        let configFile = path.resolve(CONTEXT, file);
        let config = require(configFile);
        options = Object.assign(config, options);
        CONTEXT = path.resolve(configFile, '../');
    } else {
        let configFile = path.resolve(CONTEXT, CONFIG_PATH_NAME);
        try {
            // 尝试加载目录默认的配置文件
            let config = require(configFile);
            options = Object.assign(config, options);
        } catch (e) {
            console.error(`configuration not found: "${configFile}"`);
            process.exit(1);
        }
    }

    return options;
}


function init() {

    try {
        fs.access(path.resolve(CONTEXT, CONFIG_PATH_NAME))
    } catch(e) {
        let config = {
            "tasks": [{
                "name": "package.json",
                "program": "npm install"
            }],
            "dependencies": ["package.json"],
            "repository": "git",
            "program": "cd ${taskPath}"
        };

        fs.writeFileSync(`./.ci-task-runner.json`, JSON.stringify(config, null, 2), 'utf8');
        console.log(`".ci-task-runner.json" has been created.`);
    }
}


if (program.init) {
    init();
} else {
    let options = config(program.config);
    taskRunner(options, CONTEXT).catch(errors => process.nextTick(() => {
        console.error(errors);
        process.exit(1);
    }));
}
